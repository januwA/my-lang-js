expr       : KEYWORD:var IDENTIFIER EQ expr
           : (comp-expr ((KEYWORD:&&|KEYWORD:||) comp-expr)*

comp-expr  : KEYWORD:! comp-expr
           : arith-expr ((EE|NE|LT|GT|LTE|GTE) arith-expr)*

arith-expr : term ((PLUS|MINUS) term)*

term       : factor ((MUL|DIV) factor)*

factor     : (PLUS|MINUS) factor
           : power

power      : call (POW factor)*

call       : atom (LPAREN (expr (COMMA expr)*)? RPAREN)?

atom       : INT|FLAOT|STRING|IDENTIFIER
           : LPAREN expr RPAREN
           : list-expr
           : if-expr
           : for-expr
           : while-expr
           : func-def

list-expr  : LSQUARE (expr (COMMA expr)*)? RSQUARE

if-expr    : KEYWORD:if expr KEYWORD:then expr
           : (KEYWORD:elif expr KEYWORD:then expr)*
           : (KEYWORD:else expr)?

for-expr   : KEYWORD:for IDENTIFIER EQ expr KEYWORD:to expr 
             (KEYWORD:step expr)? KEYWORD:then expr

while-expr : KEYWORD:while expr KEYWORD:then expr

func-def   : KEYWORD:fun IDENTIFIER?
             LPAREN (IDENTIFIER (COMMA IDENTIFIER)*)? RPAREN
             ARROW expr








